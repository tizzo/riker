#! /usr/bin/env node
'use strict';

var Riker = require('../..');
var Command = Riker.Command;

var command = new Command();

class Foo extends Command {
  constructor(options) {
    options = options || {}
    super(options);
    this.shortDescription = options.shortDescription || 'short description placeholder.';
    this.help = 'help placeholder';
    //this.input.pipe(this.output);
  }
  initialize() {
    this.yargs.describe('page', 'how many pages are there?');
  }
  run(done) {
    console.log('i was run!');
    if (done) done();
  }
}

class Bar extends Command {
  constructor(options) {
    options = options || {}
    super(options);
    this.shortDescription = options.shortDescription || 'short description placeholder.';
    this.help = 'help placeholder';
    //this.input.pipe(this.output);
    this.addParameter('ping-pong')
      .describe('how pings are ponged!')
      .alias('p')
      .default('9')
      .choices(['7', '8', '9']);
  }
  /*
  initialize() {
    console.log('initing');
    this.yargs.describe('ping-pong', 'how pings can we pong?');
  }
  // */
  run(config, done) {
    console.log('i was run!');
    if (done) done();
  }
}

var riker = new Riker();
riker.addSubCommand('foo', new Foo({shortDescription: 'Foo is da bomb'}));
riker.addSubCommand('bar', new Bar({shortDescription: 'Bar is da bomb'}));
var baz = new Riker.CommandCollection();
//baz.shortDescription = 'This is baz.';
//baz.help = 'Baz knows about stuffâ€¦';
baz.addSubCommand('bong', new Bar());
riker.addSubCommand('bot', new Foo());
riker.run(function() {
  //console.log('command line run done');
});
