#! /usr/bin/env node
'use strict';

var Riker = require('../..');
var Command = Riker.Command;

var command = new Command();

class Foo extends Command {
  constructor(options) {
    options = options || {}
    super(options);
    this.shortDescription = options.shortDescription || 'short description placeholder.';
    this.help = options.help || 'help placeholder';
    this.help = 'help placeholder';
    this.addParameter('sample')
      .alias('s')
      .describe('This is a sample parameter')
      .default('true');
    this.addParameter('other')
      .required()
      .describe('You must specify the other');
    this.addParameter('name')
      .array()
      .type('string')
      .describe('A name to process, may be specified multiple times.');
  }
  configure(conf, done) {
    super.configure(conf, (error) => {
      done(error);
    });
  }
  initialize() {
    super.initialize();
    this.yargs.describe('page', 'how many pages are there?');
  }
  run(done) {
    this.output.writeLine('foo was run');
    if (done) done();
  }
}

class Bar extends Command {
  constructor(options) {
    options = options || {}
    super(options);
    this.shortDescription = options.shortDescription || 'short description placeholder.';
    this.help = options.help || 'help placeholder';
    //this.input.pipe(this.output);
    this.addParameter('ping-pong')
      .describe('how pings are ponged!')
      .alias('p')
      .default('9')
      .choices(['7', '8', '9']);
  }

  configure(config, done) {
    super.configure(config, done);
  }

  run(config, done) {
    this.output.writeLine('foo was run');
    if (done) done();
  }
}

var riker = new Riker();
riker.addSubCommand('foo', new Foo({shortDescription: 'Foo is da bomb'}));
riker.addSubCommand('bar', new Bar({shortDescription: 'Bar is da bomb'}));
var baz = new Riker.CommandCollection();
var pongBaz = new Bar({shortDescription: 'Answers the question of "what rhymes with pong?"'});
pongBaz.help = 'Answers the question of "what rhymes comes after ping?"';
pongBaz.run = function(done) {
  this.output.writeLine('pooooong');
  this.output.writeLine(this.args);
};
baz.addSubCommand('pong', pongBaz);
baz.shortDescription = 'Perform baz related operations.';
riker.addSubCommand('baz', baz);
riker.run(function() {
  //console.log('command line run done');
});
